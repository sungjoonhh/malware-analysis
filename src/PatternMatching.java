import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class PatternMatching {
	private boolean[] a = new boolean[15];
	private static Process hooking;
	private static BufferedReader hooking_output;

	String tasklist_Line;

	public boolean[] VirusDetection(Object[][] hooking) {
		String str = "";
		Pattern hookingPattern1 = Pattern.compile(".*SetWindowsHook.*");
		Pattern hookingPattern3 = Pattern.compile(".*CallNextHook.*");
		Pattern hookingPattern2 = Pattern.compile(".*UnhookWindowsHook.*");

		Pattern processPattern1 = Pattern.compile(".*CreateProcess.*");
		Pattern processPattern2 = Pattern.compile(".*UnmapViewOfSection.*");
		Pattern processPattern3 = Pattern.compile(".*VirtualAlloc.*");
		Pattern processPattern4 = Pattern.compile(".*WriteProcessMemory.*");
		Pattern processPattern5 = Pattern.compile(".*ResumeThread.*");

		Pattern injectionPattern1 = Pattern.compile(".*OpenProcess.*");
		Pattern injectionPattern2 = Pattern.compile(".*VirtualAlloc.*");
		Pattern injectionPattern3 = Pattern.compile(".*WriteProcessMemory.*");
		Pattern injectionPattern4 = Pattern.compile(".*LoadLibrary.*");
		Pattern injectionPattern5 = Pattern.compile(".*CreateRemoteThread.*");

		Pattern trojanPattern1 = Pattern.compile(".*CreateProcess.*");
		Pattern trojanPattern2 = Pattern.compile(".*OpenProcess.*");
		Pattern trojanPattern3 = Pattern.compile(".*TerminateProcess.*");
		Pattern trojanPattern4 = Pattern.compile(".*WinExec.*");
		Pattern trojanPattern5 = Pattern.compile(".*ShellExecute.*");
		Pattern trojanPattern6 = Pattern.compile(".*LoadLibrary.*");
		Pattern trojanPattern7 = Pattern.compile(".*SearchPath.*");

		Pattern denialServicePattern1 = Pattern.compile(".*InitializeCiriticalSection.*");
		Pattern denialServicePattern2 = Pattern.compile(".*EnterCriticalSection.*");
		Pattern denialServicePattern3 = Pattern.compile(".*CreateService.*");
		Pattern denialServicePattern4 = Pattern.compile(".*DeleteService.*");
		Pattern denialServicePattern5 = Pattern.compile(".*_Alloca.*");
		Pattern denialServicePattern6 = Pattern.compile(".*TerminateThread.*");
		Pattern denialServicePattern7 = Pattern.compile(".*TerminateProcess.*");

		Pattern impersonationPattern1 = Pattern.compile(".*RpclmpersonateClient.*");
		Pattern impersonationPattern2 = Pattern.compile(".*ImpersonateLoggedOnUser.*");
		Pattern impersonationPattern3 = Pattern.compile(".*ColmpersonateClient.*");
		Pattern impersonationPattern4 = Pattern.compile(".*ImpersonateDdeClientWindow.*");
		Pattern impersonationPattern5 = Pattern.compile(".*ImpersonateSecurityContext.*");
		Pattern impersonationPattern6 = Pattern.compile(".*ImpersonateAnonymousToken.*");
		Pattern impersonationPattern7 = Pattern.compile(".*ImpersonateSelf.*");

		Pattern bufferOverflowPattern1 = Pattern.compile(".*Istrcat.*");
		Pattern bufferOverflowPattern2 = Pattern.compile(".*Istrcpy.*");
		Pattern bufferOverflowPattern3 = Pattern.compile(".*Wcscat.*");
		Pattern bufferOverflowPattern4 = Pattern.compile(".*Wcsncat.*");
		Pattern bufferOverflowPattern5 = Pattern.compile(".*MultiByteToWideChar.*");
		Pattern bufferOverflowPattern6 = Pattern.compile(".*strncpy.*");

		Pattern IAThookingPattern1 = Pattern.compile(".*LoadLibrary.*");
		Pattern IAThookingPattern2 = Pattern.compile(".*strcmp.*");
		Pattern IAThookingPattern3 = Pattern.compile(".*strncmp.*");
		Pattern IAThookingPattern4 = Pattern.compile(".*stricmp.*");
		Pattern IAThookingPattern5 = Pattern.compile(".*strnicmp.*");
		Pattern IAThookingPattern6 = Pattern.compile(".*VirtualProtect.*");

		Pattern antiDebuggingPattern1 = Pattern.compile(".*IsDebuggerPresent.*");
		Pattern antiDebuggingPattern2 = Pattern.compile(".*CheckRemoteDebuggerPresent.*");
		Pattern antiDebuggingPattern3 = Pattern.compile(".*OutputDebugString.*");

		Pattern screenCapturePattern1 = Pattern.compile(".*GetDC.*");
		Pattern screenCapturePattern2 = Pattern.compile(".*GetWindowDC.*");
		Pattern screenCapturePattern3 = Pattern.compile(".*CreateCompatibleDC.*");
		Pattern screenCapturePattern4 = Pattern.compile(".*CreateCompatibleBitmap.*");
		Pattern screenCapturePattern5 = Pattern.compile(".*SelectObject.*");
		Pattern screenCapturePattern6 = Pattern.compile(".*BitBlt.*");
		Pattern screenCapturePattern7 = Pattern.compile(".*WriteFile.*");

		Pattern rootKitPattern1 = Pattern.compile(".*CreateFile.*");
		Pattern rootKitPattern2 = Pattern.compile(".*ReadFile.*");
		Pattern rootKitPattern3 = Pattern.compile(".*CreateProcess.*");
		Pattern rootKitPattern4 = Pattern.compile(".*OpenProcessToken.*");
		Pattern rootKitPattern5 = Pattern.compile(".*WriteProcessMemory.*");

		boolean found[] = new boolean[61];
		for (int i = 0; i < hooking.length; i++) {
			str = (String) hooking[i][0];
			Matcher hookingMatcher1 = hookingPattern1.matcher(str);
			Matcher hookingMatcher2 = hookingPattern2.matcher(str);
			Matcher hookingMatcher3 = hookingPattern3.matcher(str);
			if (hookingMatcher1.matches())
				found[0] = true;
			if (hookingMatcher2.matches())
				found[1] = true;
			if (hookingMatcher3.matches())
				found[2] = true;

			Matcher processMatcher1 = processPattern1.matcher(str);
			Matcher processMatcher2 = processPattern2.matcher(str);
			Matcher processMatcher3 = processPattern3.matcher(str);
			Matcher processMatcher4 = processPattern4.matcher(str);
			Matcher processMatcher5 = processPattern5.matcher(str);
			if (processMatcher1.matches())
				found[3] = true;
			if (processMatcher2.matches())
				found[4] = true;
			if (processMatcher3.matches())
				found[5] = true;
			if (processMatcher4.matches())
				found[6] = true;
			if (processMatcher5.matches())
				found[7] = true;

			Matcher injectionMatcher1 = injectionPattern1.matcher(str);
			Matcher injectionMatcher2 = injectionPattern2.matcher(str);
			Matcher injectionMatcher3 = injectionPattern3.matcher(str);
			Matcher injectionMatcher4 = injectionPattern4.matcher(str);
			Matcher injectionMatcher5 = injectionPattern5.matcher(str);
			if (injectionMatcher1.matches())
				found[8] = true;
			if (injectionMatcher2.matches())
				found[9] = true;
			if (injectionMatcher3.matches())
				found[10] = true;
			if (injectionMatcher4.matches())
				found[11] = true;
			if (injectionMatcher5.matches())
				found[12] = true;

			Matcher trojannMatcher1 = trojanPattern1.matcher(str);
			Matcher trojannMatcher2 = trojanPattern2.matcher(str);
			Matcher trojannMatcher3 = trojanPattern3.matcher(str);
			Matcher trojannMatcher4 = trojanPattern4.matcher(str);
			Matcher trojannMatcher5 = trojanPattern5.matcher(str);
			Matcher trojannMatcher6 = trojanPattern6.matcher(str);
			Matcher trojannMatcher7 = trojanPattern7.matcher(str);
			if (trojannMatcher1.matches())
				found[13] = true;
			if (trojannMatcher2.matches())
				found[14] = true;
			if (trojannMatcher3.matches())
				found[15] = true;
			if (trojannMatcher4.matches())
				found[16] = true;
			if (trojannMatcher5.matches())
				found[17] = true;
			if (trojannMatcher6.matches())
				found[18] = true;
			if (trojannMatcher7.matches())
				found[19] = true;

			Matcher denialServiceMatcher1 = denialServicePattern1.matcher(str);
			Matcher denialServiceMatcher2 = denialServicePattern2.matcher(str);
			Matcher denialServiceMatcher3 = denialServicePattern3.matcher(str);
			Matcher denialServiceMatcher4 = denialServicePattern4.matcher(str);
			Matcher denialServiceMatcher5 = denialServicePattern5.matcher(str);
			Matcher denialServiceMatcher6 = denialServicePattern6.matcher(str);
			Matcher denialServiceMatcher7 = denialServicePattern7.matcher(str);
			if (denialServiceMatcher1.matches())
				found[20] = true;
			if (denialServiceMatcher2.matches())
				found[21] = true;
			if (denialServiceMatcher3.matches())
				found[22] = true;
			if (denialServiceMatcher4.matches())
				found[23] = true;
			if (denialServiceMatcher5.matches())
				found[24] = true;
			if (denialServiceMatcher6.matches())
				found[25] = true;
			if (denialServiceMatcher7.matches())
				found[26] = true;

			Matcher impersonationMatcher1 = impersonationPattern1.matcher(str);
			Matcher impersonationMatcher2 = impersonationPattern2.matcher(str);
			Matcher impersonationMatcher3 = impersonationPattern3.matcher(str);
			Matcher impersonationMatcher4 = impersonationPattern4.matcher(str);
			Matcher impersonationMatcher5 = impersonationPattern5.matcher(str);
			Matcher impersonationMatcher6 = impersonationPattern6.matcher(str);
			Matcher impersonationMatcher7 = impersonationPattern7.matcher(str);
			if (impersonationMatcher1.matches())
				found[27] = true;
			if (impersonationMatcher2.matches())
				found[28] = true;
			if (impersonationMatcher3.matches())
				found[29] = true;
			if (impersonationMatcher4.matches())
				found[30] = true;
			if (impersonationMatcher5.matches())
				found[31] = true;
			if (impersonationMatcher6.matches())
				found[32] = true;
			if (impersonationMatcher7.matches())
				found[33] = true;
			
			Matcher bufferOverflowMatcher1 = bufferOverflowPattern1.matcher(str);
			Matcher bufferOverflowMatcher2 = bufferOverflowPattern2.matcher(str);
			Matcher bufferOverflowMatcher3 = bufferOverflowPattern3.matcher(str);
			Matcher bufferOverflowMatcher4 = bufferOverflowPattern4.matcher(str);
			Matcher bufferOverflowMatcher5 = bufferOverflowPattern5.matcher(str);
			Matcher bufferOverflowMatcher6 = bufferOverflowPattern6.matcher(str);
			if (bufferOverflowMatcher1.matches())
				found[34] = true;
			if (bufferOverflowMatcher2.matches())
				found[35] = true;
			if (bufferOverflowMatcher3.matches())
				found[36] = true;
			if (bufferOverflowMatcher4.matches())
				found[37] = true;
			if (bufferOverflowMatcher5.matches())
				found[38] = true;
			if (bufferOverflowMatcher6.matches())
				found[39] = true;
			
			Matcher IAThookingMatcher1 = IAThookingPattern1.matcher(str);
			Matcher IAThookingMatcher2 = IAThookingPattern2.matcher(str);
			Matcher IAThookingMatcher3 = IAThookingPattern3.matcher(str);
			Matcher IAThookingMatcher4 = IAThookingPattern4.matcher(str);
			Matcher IAThookingMatcher5 = IAThookingPattern5.matcher(str);
			Matcher IAThookingMatcher6 = IAThookingPattern6.matcher(str);
			if (IAThookingMatcher1.matches())
				found[40] = true;
			if (IAThookingMatcher2.matches())
				found[41] = true;
			if (IAThookingMatcher3.matches())
				found[42] = true;
			if (IAThookingMatcher4.matches())
				found[43] = true;
			if (IAThookingMatcher5.matches())
				found[44] = true;
			if (IAThookingMatcher6.matches())
				found[45] = true;
			
			Matcher antiDebuggingMatcher1 = antiDebuggingPattern1.matcher(str);
			Matcher antiDebuggingMatcher2 = antiDebuggingPattern2.matcher(str);
			Matcher antiDebuggingMatcher3 = antiDebuggingPattern3.matcher(str);
			if (antiDebuggingMatcher1.matches())
				found[46] = true;
			if (antiDebuggingMatcher2.matches())
				found[47] = true;
			if (antiDebuggingMatcher3.matches())
				found[48] = true;

			Matcher screenCaptureMatcher1 = screenCapturePattern1.matcher(str);
			Matcher screenCaptureMatcher2 = screenCapturePattern2.matcher(str);
			Matcher screenCaptureMatcher3 = screenCapturePattern3.matcher(str);
			Matcher screenCaptureMatcher4 = screenCapturePattern4.matcher(str);
			Matcher screenCaptureMatcher5 = screenCapturePattern5.matcher(str);
			Matcher screenCaptureMatcher6 = screenCapturePattern6.matcher(str);
			Matcher screenCaptureMatcher7 = screenCapturePattern7.matcher(str);
			if (screenCaptureMatcher1.matches())
				found[49] = true;
			if (screenCaptureMatcher2.matches())
				found[50] = true;
			if (screenCaptureMatcher3.matches())
				found[51] = true;
			if (screenCaptureMatcher4.matches())
				found[52] = true;
			if (screenCaptureMatcher5.matches())
				found[53] = true;
			if (screenCaptureMatcher6.matches())
				found[54] = true;
			if (screenCaptureMatcher7.matches())
				found[55] = true;
			
			Matcher rootKitMatcher1 = rootKitPattern1.matcher(str);
			Matcher rootKitMatcher2 = rootKitPattern2.matcher(str);
			Matcher rootKitMatcher3 = rootKitPattern3.matcher(str);
			Matcher rootKitMatcher4 = rootKitPattern4.matcher(str);
			Matcher rootKitMatcher5 = rootKitPattern5.matcher(str);
			if (rootKitMatcher1.matches())
				found[56] = true;
			if (rootKitMatcher2.matches())
				found[57] = true;
			if (rootKitMatcher3.matches())
				found[58] = true;
			if (rootKitMatcher4.matches())
				found[59] = true;
			if (rootKitMatcher5.matches())
				found[60] = true;
		}

		if (found[0] && found[1] && found[2]) {
			System.out.println("messeage hooking");
			a[0] = true;
		} else if (found[3] && found[4] && found[5] && found[6] && found[7]) {
			System.out.println("Process Replacement");
			a[1] = true;
		} else if (found[8] && found[9] && found[10] && found[11] && found[12]) {
			System.out.println("DLL Injection");
			a[2] = true;
		} else if (found[13] && found[14] && found[15] && found[16] && found[17] && found[18] && found[19]) {
			System.out.println("Trojan");
			a[3] = true;
		} else if (found[20] && found[21] && found[22] && found[23] && found[24] && found[25] && found[26]) {
			System.out.println("Denial Service");
			a[4] = true;
		} else if (found[27] && found[28] && found[29] && found[30] && found[31] && found[32] && found[33]) {
			System.out.println("Impersonation");
			a[5] = true;
		} else if (found[34] && found[35] && found[36] && found[37] && found[38] && found[39]) {
			System.out.println("Buffer Overflow");
			a[6] = true;
		} else if (found[40] && found[41] && found[45]) {
			System.out.println("IAT Hooking");
			a[7] = true;
		} else if (found[40] && found[42] && found[45]) {
			System.out.println("IAT Hooking");
			a[7] = true;
		} else if (found[40] && found[43] && found[45]) {
			System.out.println("IAT Hooking");
			a[7] = true;
		} else if (found[40] && found[44] && found[45]) {
			System.out.println("IAT Hooking");
			a[7] = true;
		} else if (found[46] || found[47] || found[48]){
			System.out.println("Anti Debugging");
			a[8] = true;
		} else if (found[49] && found[50] && found[51] && found[52] && found[53] && found[54] && found[55]){
			System.out.println("Screen Capture");
			a[9] = true;
		} else if (found[56] && found[57] && found[58] && found[59] && found[60]) {
			System.out.println("Rootkit");
			a[10] = true;
		} else {
			System.out.println("NO VIRUS");
		}
		return a;
	}
}