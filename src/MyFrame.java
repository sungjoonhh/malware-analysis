import java.awt.Canvas;
import java.awt.Color;
import java.awt.FlowLayout;
import java.awt.GridLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.File;

import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;

public class MyFrame {
	private File f = null;
	JFrame jFrame = new JFrame("Tasklist");
	boolean flags = false;
	private JFrame baseFrame;
	private JPanel processMonitor;
	private JPanel apiInfo;
	private JButton newBtn;
	private JButton closeBtn;
	private JButton btnFile;
	private JPanel btnPanel;
	private JTable api_Table;
	private JFrame fileFrame;
	private DefaultTableModel model;
	private JScrollPane jScollPane;
	private String columnNames[] = { "Process Name", "Process ID", "Session Name", "Session ID", "Memory Usage" };
	private String usedAPI[] = { "사용된 API", "횟수" };
	private Object kkk[][] = {};
	private CountAPI count_api = new CountAPI();
	private PatternMatching pm = new PatternMatching();
	private boolean[] a;
	private Object[][] abcd;
	private Object[][] bbb;
	private String location;
	private BufferedReader hooking_output;
	private JButton hookingButton;
	private JButton processButton;
	private JButton injectionButton;
	private JButton trojanButton;
	private JButton denialServiceButton;
	private JButton impersonationButton;
	private JButton bufferOverflowButton;
	private JButton IAThookingButton;
	private JButton antiDebuggingButton;
	private JButton screenCaptureButton;
	private JButton rootkitButton;
	private JPanel standardPanel;

	public MyFrame() {
		baseFrame = new JFrame();
		processMonitor = new JPanel();
		apiInfo = new JPanel();
		newBtn = new JButton("새로운 탐색");
		closeBtn = new JButton("닫기");
		btnFile = new JButton("파일 탐색");
		hookingButton = new JButton("Message Hooking");
		hookingButton.setMargin(new Insets(10, 10, 10, 10));
		processButton = new JButton("Process Replacement");
		injectionButton = new JButton("DLL injection");
		trojanButton = new JButton("Trojan");
		denialServiceButton = new JButton("Denial service");
		impersonationButton = new JButton("Impersonation");
		bufferOverflowButton = new JButton("Buffer Overflow");
		antiDebuggingButton = new JButton("Anti Debugging");
		screenCaptureButton = new JButton("Screen Capture");
		IAThookingButton = new JButton("IAT Hooking");
		rootkitButton = new JButton("RootKit");
		standardPanel = new JPanel();

		btnPanel = new JPanel();
		model = new DefaultTableModel(kkk, usedAPI);
		api_Table = new JTable(model);

		fileFrame = new JFrame();
		fileFrame.setSize(400, 350);
		fileFrame.setLocation(100, 100);
		fileFrame.setLayout(new FlowLayout());
		JTextField fileText = new JTextField(24);

		Canvas c = new Canvas();
		c.setBounds(45, 45, 200, 250);

		baseFrame.setSize(1000, 600);
		baseFrame.setLocation(100, 100);
		baseFrame.setLayout(new GridLayout(1, 1));

		newBtn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				JOptionPane.showMessageDialog(null, "새로운 탐색입니다.", "확인", JOptionPane.INFORMATION_MESSAGE);

				jScollPane = new JScrollPane(api_Table);
			}
		});

		closeBtn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				int result = JOptionPane.showConfirmDialog(null, "정말 종료 하시겠습니까?", "확인", JOptionPane.YES_NO_OPTION);
				if (result == JOptionPane.YES_OPTION) {
					System.exit(0);
				}
			}
		});

		btnFile.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				JFileChooser fileChoose = new JFileChooser();
				FileNameExtensionFilter filter = new FileNameExtensionFilter("exe", "exe");
				fileChoose.setFileFilter(filter);
				fileChoose.setMultiSelectionEnabled(false);

				int result = fileChoose.showOpenDialog(null);

				if (result == JFileChooser.APPROVE_OPTION) {
					f = fileChoose.getSelectedFile();

					fileText.setText(f.getPath());
					location = f.getPath().replace('\\', '/');

					abcd = count_api.Parsing(location);
					// hooking_output = count_api.returnBuffer();
					a = pm.VirusDetection(abcd);
					repaint(abcd, a);
				}

				fileFrame.setVisible(false);
			}

		});

		jScollPane = new JScrollPane(api_Table);
		apiInfo.add(jScollPane);
		apiInfo.setSize(500, 400);

		btnPanel.add(newBtn);
		btnPanel.add(btnFile);
		btnPanel.add(closeBtn);

		processMonitor.add(jScollPane);
		processMonitor.add(btnPanel);
		processMonitor.setSize(300, 200);

		standardPanel.setLayout(new GridLayout(11, 1));
		standardPanel.add(hookingButton);
		standardPanel.add(processButton);
		standardPanel.add(injectionButton);
		standardPanel.add(trojanButton);
		standardPanel.add(impersonationButton);
		standardPanel.add(bufferOverflowButton);
		standardPanel.add(IAThookingButton);
		standardPanel.add(antiDebuggingButton);
		standardPanel.add(screenCaptureButton);
		standardPanel.add(rootkitButton);
		apiInfo.add(standardPanel);
		baseFrame.add("CENTER", processMonitor);
		baseFrame.add("CENTER", apiInfo);

		baseFrame.setVisible(true);
	}

	public void repaint(Object[][] abc, boolean[] a) {
		if (a[0])
			hookingButton.setBackground(Color.red);
		if (a[1])
			processButton.setBackground(Color.red);
		if (a[2])
			injectionButton.setBackground(Color.red);
		if (a[3])
			trojanButton.setBackground(Color.red);
		if (a[4])
			denialServiceButton.setBackground(Color.red);
		if (a[5])
			impersonationButton.setBackground(Color.red);
		if (a[6])
			bufferOverflowButton.setBackground(Color.red);
		if (a[7])
			IAThookingButton.setBackground(Color.red);
		if (a[8])
			antiDebuggingButton.setBackground(Color.red);
		if (a[9])
			screenCaptureButton.setBackground(Color.red);
		if (a[10])
			rootkitButton.setBackground(Color.red);

		processMonitor.remove(jScollPane);
		processMonitor.remove(btnPanel);
		model = new DefaultTableModel(abc, usedAPI);
		api_Table = new JTable(model);
		jScollPane = new JScrollPane(api_Table);

		btnPanel.add(newBtn);
		btnPanel.add(btnFile);
		btnPanel.add(closeBtn);

		processMonitor.add(jScollPane);
		processMonitor.add(btnPanel);
		processMonitor.revalidate();
		processMonitor.repaint();

		standardPanel.add(hookingButton);
		standardPanel.add(processButton);
		standardPanel.add(injectionButton);
		standardPanel.add(trojanButton);
		standardPanel.add(impersonationButton);
		standardPanel.add(bufferOverflowButton);
		standardPanel.add(IAThookingButton);
		standardPanel.add(antiDebuggingButton);
		standardPanel.add(screenCaptureButton);
		standardPanel.add(rootkitButton);

		apiInfo.add(standardPanel);
		apiInfo.revalidate();
		apiInfo.repaint();

		baseFrame.revalidate();
		baseFrame.repaint();
	}
}
