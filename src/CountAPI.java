import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayList;

import java.util.List;

public class CountAPI {
	private static List hooking_List;
	private static String[] str;
	private static List<CountAPI_FuncCount> functionCount_List;
	private static Object[][] process;
	private static List<CountAPI_FuncCount> processes;
	private static BufferedReader hooking_output;
	private static BufferedReader hooking_output2;
	
	public static List Listing(String data) {

		hooking_List = new ArrayList();
		functionCount_List = new <CountAPI_FuncCount>ArrayList();

		try {
			String hooking_Line;
			Process hooking = Runtime.getRuntime().exec("python pHook.py " + data);
			hooking_output = new BufferedReader(new InputStreamReader(hooking.getInputStream()));
			while ((hooking_Line = hooking_output.readLine()) != null) {
				if (hooking_Line.contains("CALL:")) {
					str = hooking_Line.split("CALL:");
					if (!contains(functionCount_List, str[1])) {
						functionCount_List.add(new CountAPI_FuncCount(str[1], 1));
					}

				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		return functionCount_List;
	}
	public BufferedReader returnBuffer(){
		return hooking_output;
	}
	public static boolean contains(List<CountAPI_FuncCount> list, String func) {
		boolean found = false;
		for (int i = 0; i < list.size(); i++) {
			if (list.get(i).getFunc().contains(func)) {
				found = true;
				list.get(i).increaseCount();
				break;
			}
		}
		return found;
	}

	public static Object[][] Parsing(String location) {
		processes = new <CountAPI_FuncCount>ArrayList();
		processes = Listing(location);
		process = new Object[processes.size()][2];
		for (int i = 0; i < processes.size(); i++) {
			process[i][0] = processes.get(i).getFunc();
			process[i][1] = processes.get(i).getCount();
		}
		return process;
	}
}
